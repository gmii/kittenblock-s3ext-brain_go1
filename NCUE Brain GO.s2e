{
	"extensionName": "NCUE Brain GO",
	"extensionPort": 0,
	"sort":8,
	"firmware":"1.2.107",
	"javascriptURL":"js/NCUE Brain GO.js",
	"isMakeBlockBoard":false,
	"blockSpecs": [
		["h","NCUE Brain GO 主程式 V2.0","runArduino",{"src":"","inc":"#include <MeMCore.h>\n","def":"","setup":"","loop":""}],

		["-"],


		["w", "設定: %d.motorPort 轉速設為: %d.motorvalue","runMotor", "白色馬達", 0,
		{"encode":"{d0}{s1}","setup":"","inc":"","def":"","work":"motor_{0}.run(({0})==M1?-({1}):({1}));\n","loop":""}],

		["-"],

		["w", "設定:蜂鳴器音調 %d.note 節拍 %d.beats","runBuzzer", "C4", "Half",
		{"encode":"{s0}","setup":"","inc":"","def":"MeBuzzer buzzer;\n","work":"buzzer.tone({0}, {1});\ndelay(20);\n","loop":""}],

		["B", "%m.Sensor_pin 狀態 ","runDigitalt","紅色 光感測器",
		{"encode":"{d0}","setup":"pinMode({0},INPUT);\n","inc":"","def":"","work":"digitalRead({0})","loop":""}],

    	["w", "設定 %m.LED_Color 為 %m.LED_Switch","runLED", "紅色LED", "開",
		{"encode":"{d0}{d1}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"digitalWrite({0},{1});\n","loop":""}],
		
		["w", "設定 %m.IO_outin 為 %m.IO_Switch","IO", "紅光", "亮",
		{"encode":"{d0}{d1}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"digitalWrite({0},{1});\n","loop":""}],

    	["w", "設定 %m.PC_Pin 為 %m.LED_Switch","runADC", "PC1", "開",
		{"encode":"{d0}{d1}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"digitalWrite({0},{1});\n","loop":""}],


		["w", "設定 %d.Servo_Color 角度為 %d.servovalue","runServo", "綠色調角器", 90,
		{"encode":"{d0}{d1}",
		"setup":"pinMode({0}, OUTPUT); //servo s\nfor(int i=0;i<50;i++){servopulse(0.0);delay(15);}//demo\n",
		"inc":"",
		"def":"void servopulse(float angle){\nint pulsewidth=(angle*11)+530;\ndigitalWrite({0},HIGH);\ndelayMicroseconds(pulsewidth);\ndigitalWrite(10,LOW);\ndelayMicroseconds(20000-pulsewidth);}\n",
		"work":"for(int i=0;i<50;i++){servopulse({1});delay(15);}//demo\n",
		"loop":""}
		],

		["R", "測得溫度(°C)","getTemp","0",
		{"encode":"{n0}","setup":"pinMode(A0,INPUT);\n","inc":"","def":"","work":"(((analogRead(A0)*50)/10)-500)/10\n ","loop":""}],

    	["R", "%m.Ultrasonic_Color 偵測距離 ","getUltrasonicArduino","白色超音波",
		{"encode":"{d0}",
		"setup":"","inc":"",
		"def":"float getDistance(int trig){\nchar A=0;\nchar B = 0;\nchar C = 0;\nif(trig == 12){ A = 13; B = 12;} else { A = 2; B = 3;}\npinMode(A,OUTPUT);\ndigitalWrite(A,LOW);\ndelayMicroseconds(2);\ndigitalWrite(A,HIGH);\ndelayMicroseconds(10);\ndigitalWrite(A,LOW);\npinMode(B,INPUT);\nC = pulseIn(B,HIGH,30000)/58.0;\nif(C<=1){return 400;} else{return C;}\n } // 必要註解(以確保大括號存在)",
		"work":"getDistance({0})","loop":""}],

		["b","有數據可讀","isAvailable",
		{"setup":"Serial.begin(9600);\n","inc":"","def":"MeSerial se;\n","work":"se.dataLineAvailable()==0","loop":""}],

		["R","讀取藍芽數據","readLine",
		{"setup":"Serial.begin(9600);\n","inc":"","def":"MeSerial se;\n","work":"se.readDataLine()","loop":""}],

		["w", "藍芽發送數據: %s","writeLine", "hello",
		{"setup":"Serial.begin(9600);\n","inc":"","def":"MeSerial se;\n","work":"Serial.println({0});\n","loop":""}],

		["b", "藍芽輸入為%s", "bluetoothpag", "f",
		{"setup":"Serial.begin(9600);\n", "inc":"", "def":"MeSerial se;\n", "work":"String(String(se.readDataLine())) == {0}", "loop":""}],

		["R", "3-axis gyro %d.GyroAxis angle","getGyro","X-Axis",
		{"encode":"{d0}","setup":"gyro.begin();\n","inc":"","def":"MeGyro gyro;\n","work":"gyro.getAngle({0})","loop":"gyro.update();\n"}],

		["B", "read digital pin %n","getDigital","24",
		{"encode":"{d0}","setup":"pinMode({0},INPUT);\n","inc":"","def":"","work":"digitalRead({0})","loop":""}],

		["R", "類比訊號ADC %d.PinSel","getAnalog","1",
		{"encode":"{d0}","setup":"pinMode(14+{0},INPUT);\n","inc":"","def":"","work":"analogRead(14+{0})","loop":""}],

		["R", "測得一氧化碳濃度(ppm)", "CO_ppm",
		{"setup":"pinMode(15,INPUT);\nSerial.begin(9600);\n","inc":"#include \"MQ7.h\"\n","def":"MQ7 mq7(analogRead(15),5.0);\n","work":"mq7.getPPM()","loop":""}],

		["R", "RGB偵測器 %m.RGB_detector 數值", "RGBDetector",  "偵測紅色",
		{
		"encode":"{d0}",
		"setup":"Wire.begin();\nSerial.begin(9600);\n",
		"inc":"#include \"GroveColorSensor.h\"\n",
		"def":"int red_d, green_d, blue_d;\nint getRGB(int color) {\nswitch(color) {\ncase 0: return red_d;\ncase 1: return green_d;\ncase 2: return blue_d;\n}\n }",
		"work":"getRGB({0})",
		"loop":"GroveColorSensor colorSensor;\ncolorSensor.ledStatus = 1;\ncolorSensor.readRGB(&red_d, &green_d, &blue_d);\nSerial.println(getRGB({0}),DEC);\ndelay(300);\n"
		}],

		["R", "測得PM2.5數值(μg/m3)", "PM_Detector",
		{
		"encode":"{d0}",
		"setup":"Serial.begin(9600);\npinMode(15,INPUT);\npinMode(9,OUTPUT);\n",
		"inc":"",
		"def":"int samplingTime = 280;\nint deltaTime = 40;\nint sleepTime = 9680;\nfloat voMeasured = 0;\nfloat calcVoltage = 0;\nfloat dustDensity = 0;",
		"work":"dustDensity",
		"loop":"digitalWrite(9,LOW);\ndelayMicroseconds(samplingTime);\nvoMeasured = analogRead(15);\ndelayMicroseconds(deltaTime);\ndigitalWrite(9,HIGH);\ndelayMicroseconds(sleepTime);\ncalcVoltage = voMeasured * (5.0 / 1024.0);\ndustDensity = 0.17 * calcVoltage ;\ndustDensity = (dustDensity * 1000);\nSerial.print(dustDensity);\ndelay(100);"
		}],
		[
			"w",
			"持續偵測電子羅盤",
			"Compass_initial",
			{
				"setup":"Wire.begin();\ncompass.init();\ncompass.setSamplingRate(50);\ncompass.setRange(2);\ncompass.setOversampling(64);\n",
				"inc":"#include \"QMC5883L.h\"\n",
				"def":"\nQMC5883L compass;\n",
				"work":"int heading = compass.readHeading();\n",
				"loop":"",
			}
		],
		
		["r", "取得羅盤角度", "heading",
		{"setup":"","inc":"","def":"","work":"heading","loop":""}],
		[
			"w",
			"啟動LCD",
			"LCD_initial",
			{
				"setup":"lcd.begin(16, 2);\nlcd.backlight();\nlcd.clear();\n",
				"inc":"#include \"LiquidCrystal_I2C.h\"\n",
				"def":"LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);\nchar LCDstring[32] = {' '};\nString str=\"\";\n\nvoid setLCD(int row, int col) {\nint index = row * 16 + col- 17;\nfor(int i=0; index+i < 32 && i < str.length(); i++)\nLCDstring[index+i]=str[i];\n }\n",
				"work":"",
				"loop":"lcd.setCursor(0, 0);\nlcd.print(LCDstring);\n\nlcd.setCursor(0, 1);\nlcd.print(&LCDstring[16]);\n",
			}
		],
		[
			"w",
			"設定LCD %d.LCDrow 列 第 %d.LCDcol 個字 顯示 %s.LCDString",
			"LCD_show",
			1,
			1,
			" ",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"str = String({2});\nsetLCD({0}, {1});\n",
				"loop":"",
			}
		],
		[
			"w",
			"清除LCD內容",
			"LCD_clear",
			{
				"setup":"",
				"inc":"",
				"def":"void str_clear() {\nfor(int i = 0; i < 32; ++i)\nLCDstring[i] = ' ';\n} \n",
				"work":"str_clear();\nlcd.clear();\n",
				"loop":"",
			}
		],
		[
			"w",
			"wifi連線:SSID=%s Password=%s 鮑率%m.Wifibegin 以 %m.WifiHorS 運行 API=%s",
			"setupWifi",
			" ",
			" ",
			"9600",
			"硬體",
			"RIJZQTNUE1RLYEE6",
			{
				"setup":"Serial.begin(9600);\nespSerial.begin({2});\nespData(\"AT+RST\", 1000, DEBUG); //Reset the ESP8266 module\nespData(\"AT+CWMODE=1\", 1000, DEBUG); //Set the ESP mode as station mode\nespData(\"AT+CWJAP=\" + DQ + mySSID + DQ + \",\" + DQ + myPWD + DQ, 1000, DEBUG); //Connect to WiFi network\ndelay(1000);\n",
				"inc":"#define DEBUG true\n",
				"def":"String str_CWJAP=\"AT+CWJAP=\";\nString DQ = String('\"');\nString mySSID = String({0}); // WiFi SSID\nString myPWD = String({1}); // WiFi Password\nString myAPI = String({4}); // API Key\nString myHOST = \"api.thingspeak.com\";\nString myPORT = \"80\";\nint trig;\nchar port_A = 0;\nchar port_B = 0;\nchar port_C = 0;\nint Hard_or_Soft = {3};\nSoftwareSerial espSerial(3,2);\n
				String espData(String command, const int timeout, boolean debug) {\n
				String response = \"\";\n
				if({3} == 1)\n
					espSerial.println(command);\n
				else\n
					Serial.println(command);\n
				long int time = millis();\n
				while ((time + timeout) > millis()) {\n
				if({3} == 1)//soft\n
					while (espSerial.available()) {\n
						char c = espSerial.read();\n
						response += c;//soft\n}// soft end
						if({3} == 0)//hard\n
						while (Serial.available()) {\n
							char c = Serial.read();\n
							response += c;//hard\n
						}//hard end\n
				} // while end\n
				return response;\n
				}// espData end\n",
				"work":"",
				"loop":"port_A = 13; port_B = 12;\npinMode(port_A,OUTPUT);\ndigitalWrite(port_A,LOW);\ndelayMicroseconds(2);\ndigitalWrite(port_A,HIGH);\ndelayMicroseconds(10);\npinMode(port_B,INPUT);\nport_C = pulseIn(port_B,HIGH,30000)/58.0;\n",
			}
		],
		[
			"w",
			"wifi Field%n Name%s value%n",
			"setWifiFields",
			"1",
			" ",
			" ",
			{
				"setup":"",
				"inc":"",
				"def":"int sendVal{0};\nString sendData = \"GET /update?api_key=\" + myAPI;\n",
				"work":"",
				"loop":"sendVal{0} = {2};\nsendData += String(\"&\") + String({1}) + String(\"=\") + String(sendVal{0});\n",
			}
		],
		[
			"w",
			"送出Field資訊",
			"sendFieldData",
			{
				"setup":"",
				"inc":"",
				"def":"//hope for another better software to support extension\n",
				"work":"",
				"loop":"espData(\"AT+CIPMUX=1\", 1000, DEBUG);\n
				espData(\"AT+CIPSTART=0,\" + DQ + \"TCP\" + DQ + \",\" + DQ + myHOST + DQ + \",\" + myPORT, 1000, DEBUG);\n
				espData(\"AT+CIPSEND=0,\" + String(sendData.length() + 4), 1000, DEBUG);\n
				if(Hard_or_Soft == 1){\nespSerial.find(\">\");\nespSerial.println(sendData);\n}\n
				else{\nSerial.find(\">\");\nSerial.println(sendData);\n}\n
				espData(\"AT+CIPCLOSE=0\", 1000, DEBUG);\n
				delay(5000);\n",
			}
		],
		
		["b", "指紋辨識 腳位(%n, %n)", "fingerPrint", "3", "2",
		    {
		        "setup":"
FP_Serial.begin(9600); //software serial for fingeprint module
//intial fingerprint module of protocol
FP_OPEN(FP_Serial);
if (!FP_boolReturnACK())
{
while (1);
}",
				"inc":"#include \"FP_command.h\"\n#include <SoftwareSerial.h>\n",
		        "def":"SoftwareSerial FP_Serial({0}, {1});\nint FP_success = 0;\n",
		        "work":"(FP_success)",
		        "loop":"
unsigned char choose_function;   //for menu handle
unsigned int loop_time;

FP_LED_open(FP_Serial);
if (!FP_boolReturnACK())
{
FP_LED_close(FP_Serial);
return;
}

loop_time = 1;
while (1)    //waiting timeout
{
delay(100);
FP_CAPTUREFINGER(0, FP_Serial);
if (FP_boolReturnACK())
{
FP_CAPTUREFINGER(0, FP_Serial);
if (FP_boolReturnACK())
break;
}

if (loop_time == 50)
{
FP_LED_close(FP_Serial);
delay(500);
return;
}
loop_time++;
}

FP_Identify(FP_Serial);
if (FP_boolReturnACK())
{
FP_LED_close(FP_Serial);
delay(200);
FP_success = 1 ;
}
else
{
FP_LED_close(FP_Serial);
delay(200);
FP_success = 0 ;
}"
		    }
		],
		[
			"w", "DHT11溫溼度初始化", "DHT11_Init",
			{
				"setup":"Serial.begin(9600);\n",
				"inc":"#include \"SimpleDHT.h\"\n",
				"def":"int pinDHT11 = 16; // ADC2\nSimpleDHT11 dht11(pinDHT11);\nbyte temperature = 0;\nbyte humidity = 0;\nint err = SimpleDHTErrSuccess;\n",
				"work":"",
				"loop":"
// start working...
Serial.println(\"=================================\");
Serial.println(\"Sample DHT11...\");

// read without samples.
if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
Serial.print(\"Read DHT11 failed, err=\"); Serial.println(err);delay(1000);
return;
}
Serial.print(\"Sample OK: \");
Serial.print((int)temperature); Serial.print(\" *C, \");
Serial.print((int)humidity); Serial.println(\" H\");

// DHT11 sampling rate is 1HZ.
delay(1500);",
			}
		],
		[
			"r", "DHT11偵測溫度", "DHT11_Temp",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"((int)temperature)",
				"loop":"",
			}
		],
		[
			"r", "DHT11偵測濕度", "DHT11_Humi",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"((int)humidity)",
				"loop":"",
			}
		],
		[
			"w",
			"GPS初始化設定",
			"GPS_senser",
			{
				"setup":"Serial.begin(9600);\nserial_collection.begin(9600);\n",
				"inc":"#include \"TinyGPSPlus.h\"\n#include <SoftwareSerial.h>\n",
				"def":"SoftwareSerial serial_collection(3,2);     //Rx,Tx\nTinyGPSPlus gps;\n",
				"work":"while(serial_collection.available())\n{\ngps.encode(serial_collection.read());\n}\n",
				"loop":"",
			}
		],

		
		[
			"r", "GPS經度", "Longtitude",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"(gps.location.lng())",
				"loop":"",
			}
		],
		[
			"r", "GPS緯度", "Latitude",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"(gps.location.lat())",
				"loop":"",
			}
		],
		[
			"r", "海拔高度", "Altitude Feet",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"(gps.altitude.feet())",
				"loop":"",
			}
		],
		[
			"w", "設定私有雲端 IP:%s PORT:%n ID:%s PASSWORD:%s", "Owncloud","","","","",
			{
				"setup":"mySerial.begin(9600);\nSerial.begin(9600);\nmySerial.println(F(\"AT+CWMODE=1\"));\ndelay(1000);\nmySerial.println(\"AT+CWJAP_DEF=\\\"\"+(String){2}+\"\\\",\\\"\"+\"{3}\"+\"\\\"\");\ndelay(10000);\nmySerial.println(\"AT+CIPSTART=\\\"TCP\\\",\\{0},{1}\");\ndelay(1000);\nmySerial.println(\"AT+CIPMODE=1\");\ndelay(1000);\nmySerial.println(\"AT+CIPSEND\");\ndelay(1000);\nwhile(mySerial.available()){\nSerial.println(mySerial.available());\nmySerial.read();\n}\nSerial.println(mySerial.available());\n ",
				"inc":"",
				"def":"unsigned char buff[36] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\nint LED[9]={0,0,0,0,0,0,0,0,0};\ndouble val;\nSoftwareSerial mySerial(13, 12);\n",
				"work":"",
				"loop":"",
			}
		],
		[
			"w", "上傳資料%n,%n", "updata","","",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"temp={0}*100;\nLDM1={1}*100;\nADC1=ADC1*100;\nm1=m1*100;\nbuff[0]=(int){0}/100000;\nbuff[1]=(int){0}/10000%10;\nbuff[2]=(int){0}/1000%10;\nbuff[3]=(int){0}/100%10;\nbuff[4]=(int){0}/10%10;\nbuff[5]=(int){0}%10\n;buff[6]=(int){1}/100000;\nbuff[7]=(int){1}/10000%10;\nbuff[8]=(int){1}/1000%10;\nbuff[9]=(int){1}/100%10;\nbuff[10]=(int){1}/10%10;\nbuff[11]=(int){1}%10;\nbuff[12]=(int)m1/100000;\nbuff[13]=(int)m1/10000%10;\nbuff[14]=(int)m1/1000%10;\nbuff[15]=(int)m1/100%10;\nbuff[16]=(int)m1/10%10;\nbuff[17]=(int)m1%10;\nbuff[18]=(int)ADC1/100000;\nbuff[19]=(int)ADC1/10000%10;\nbuff[20]=(int)ADC1/1000%10;\nbuff[21]=(int)ADC1/100%10;\nbuff[22]=(int)ADC1/10%10;\nbuff[23]=(int)ADC1%10;\nbuff[24]=0;\nbuff[25]=0;\nbuff[26]=0;\nbuff[27]=0;\nbuff[28]=0;\nbuff[29]=0;\nbuff[30]=0;\nbuff[31]=0;\nbuff[32]=0;\nbuff[33]=0;\nbuff[34]=0;\nbuff[35]=0;\nfor(int i = 0;i<36;i++) {\nmySerial.print(buff[i]); \n}\ndelay(600);\n",
				"loop":"",
			}
		],
		[
			"w", "計算資料回傳", "backdata",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"if(mySerial.available()>21) {\nchar Rxbuff[100];\nfor(int i=0;i<22;i++){\nRxbuff[i]=mySerial.read();\n}\nfor(int i = 0 ; i<10;i++){\nif(Rxbuff[i]=='s'){\nLED[0]=Rxbuff[i+1];\nLED[1]=Rxbuff[i+2];\nLED[2]=Rxbuff[i+3];\nLED[3]=Rxbuff[i+4];\nLED[4]=Rxbuff[i+5];\nLED[5]=Rxbuff[i+6];\nLED[6]=Rxbuff[i+7];\nLED[7]=Rxbuff[i+8];\nLED[8]=Rxbuff[i+9];\nval=((LED[3]-48)*100000+(LED[4]-48)*10000+(LED[5]-48)*1000+(LED[6]-48)*100+(LED[7]-48)*10+(LED[8]-48));\n}\n}\n}\n",
				"loop":"",
			}
		],
		[
			"r", "回傳值", "val",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"(val)",
				"loop":"",
			}
		],
		
	],

	"menus": {
		"yellowPorts":["Port1","Port2","Port3","Port4"],
    	"bluePorts":["Port1","Port2","Port3","Port4"],
    	"grayPorts":[],
    	"whitePorts":["Port1","Port2","Port3","Port4"],
    	"blackPorts":["Port3","Port4"],
    	"soundPort":["Port3","Port4"],
		"motorPort":["白色馬達","藍色馬達"],
		"normalPort":["Port1","Port2","Port3","Port4"],
		"servoPort":["Port1","Port2","Port3","Port4"],
		"slot":["Slot1","Slot2"],
		"PinSel":["1","2"],
		"index":["all","led left","led right"],
		"index0":["all",1,2,3,4],
		"index2":["all",1,15,30],
		"Axis":["X-Axis","Y-Axis"],
		"GyroAxis":["X-Axis","Y-Axis","Z-Axis"],
		"port":["Port1","Port2","Port3","Port4"],
		"lport":["led on board"],
		"laport":["light sensor on board","Port3","Port4"],
		"direction":["run forward","run backward","turn right","turn left"],
		"points":[":",""],
		"note":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5","C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"beats":["Half","Quarter","Eighth","Whole","Double"],
		"servovalue":[0,45,90,135,180],
		"motorvalue":[255,100,50,0,-50,-100,-255],
		"value":[0,20,60,150,255],
		"button_state":["pressed","released"],
		"shutter":["Press","Release","Focus On","Focus Off"],
		"switch":["Off","On"],
		"ircode":["A","B","C","D","E","F","↑","↓","←","→","Setting","R0","R1","R2","R3","R4","R5","R6","R7","R8","R9"],
		"touch_mode":["direct","toggle"],
		"button_key":["key1","key2","key3","key4"],
		"humiture":["humidity","temperature"],
        "Sensor_pin":["綠色 光感測器","紅色 光感測器"],
        "LED_Color":["紅色LED","黃色LED","綠色LED"],
	"IO_outin":["紅光","藍光","綠光"],
        "PC_Pin":["PC1","PC2","PC3","PC4","PC5"],
        "LED_Switch":["開","關"],
	"IO_Switch":["亮","不亮"],
        "Servo_Color":["綠色調角器","紅色調角器"],
        "Ultrasonic_Color":["白色超音波","藍色超音波"],
        "servovalue":["0","45","90","135","180"],
		"digital":["HIGH", "LOW"],
		"RGB_detector":["偵測紅色", "偵測綠色", "偵測藍色"],
		"LCDrow":[1, 2],
		"LCDcol":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
		"WifiHorS":["硬體", "軟體"],
		"Wifibegin":[9600, 115200],

	},

	"values":{
		"led left":2,
		"led right":1,
		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0,
		"servovalue":[0,45,90,135,180],
		"all":0,
		"run":2,
		"stop":2,
		"get":1,
		"motor":10,
		"ir":13,
		"irremote":14,
		"irremotecode":18,
		"lightsensor":3,
		"linefollower":17,
		"timer":50,
		"joystick":5,
		"potentiometer":4,
		"soundsensor":7,
		"infrared":16,
		"limitswitch":21,
		"pirmotion":15,
		"temperature":2,
		"digital":30,
		"analog":31,
		"button":22,
		"buzzer":34,
		"button_inner":35,
		"pressed":0,
		"released":1,
		"led":8,
		"ultrasonic":1,
		"Slot1":1,
		"Slot2":2,
		"Port1":1,
		"Port2":2,
		"Port3":3,
		"Port4":4,
		"Port5":5,
		"Port6":6,
		"Port7":7,
		"Port8":8,
		"On":1,
		"Off":0,
		"LOW":0,
		"HIGH":1,
		"Press":1,
		"Release":0,
		"Focus On":3,
		"Focus Off":2,
		"led on board":7,
		"light sensor on board":6,
		"開":0,
		"關":1,
		"亮":1,
		"不亮":0,
		"紅光":2,
		"藍光":3,
		"綠光":16,
		"白色馬達":9,
		"藍色馬達":10,
                "綠色調角器":10,
                "紅色調角器":9,
                "白色超音波":12,
                "藍色超音波":13,
		"紅色 光感測器":9,
		"綠色 光感測器":10,
                "紅色LED":9,
                "黃色LED":11,
                "綠色LED":10,
                "PC1":15,
                "PC2":16,
                "PC3":17,
                "PC4":18,
                "PC5":19,
		"X-Axis":1,
		"Y-Axis":2,
		"Z-Axis":3,
		"run forward":2,
		"run backward":1,
		"turn left":3,
		"turn right":4,
		"B0":31,"C1":33,"D1":37,"E1":41,"F1":44,"G1":49,"A1":55,"B1":62,
			"C2":65,"D2":73,"E2":82,"F2":87,"G2":98,"A2":110,"B2":123,
			"C3":131,"D3":147,"E3":165,"F3":175,"G3":196,"A3":220,"B3":247,
			"C4":262,"D4":294,"E4":330,"F4":349,"G4":392,"A4":440,"B4":494,
			"C5":523,"D5":587,"E5":659,"F5":698,"G5":784,"A5":880,"B5":988,
			"C6":1047,"D6":1175,"E6":1319,"F6":1397,"G6":1568,"A6":1760,"B6":1976,
			"C7":2093,"D7":2349,"E7":2637,"F7":2794,"G7":3136,"A7":3520,"B7":3951,
			"C8":4186,"D8":4699,
		"A":69,
		"B":70,
		"C":71,
		"D":68,
		"E":67,
		"F":13,
		"↑":64,
		"↓":25,
		"←":7,
		"→":9,
		"R0":22,
		"R1":12,
		"R2":24,
		"R3":94,
		"R4":8,
		"R5":28,
		"R6":90,
		"R7":66,
		"R8":82,
		"R9":74,
		"humidity":0,
		"temperature":1,
		"Setting":21,
		"direct":0,
		"toggle":1,
		"key1":1,
		"key2":2,
		"key3":3,
		"key4":4,
		"偵測紅色":0,
		"偵測綠色":1,
		"偵測藍色":2,
		"硬體":0,
		"軟體":1,
	},
	"translators":{
	}
}
